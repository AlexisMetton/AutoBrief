#!/usr/bin/env python3
"""
Script simple pour envoyer un email via l'API AutoBrief
Utilis√© par le scheduler GitHub Actions
"""

import os
import sys
import json
import requests
from datetime import datetime

def send_email_via_streamlit(to_email, subject, content):
    """Envoie un email via l'application Streamlit"""
    
    try:
        # URL de votre application Streamlit
        streamlit_url = "https://alexismetton.streamlit.app"
        
        # R√©cup√©rer la cl√© API depuis les variables d'environnement
        api_key = os.getenv('API_KEY')
        if not api_key:
            print(f"‚ùå API_KEY non trouv√© dans les variables d'environnement")
            return False
        
        # Construire l'URL de l'API
        api_url = f"{streamlit_url}/api"
        
        # Param√®tres de la requ√™te
        params = {
            'action': 'send_email',
            'api_key': api_key,
            'user_email': to_email,
            'subject': subject,
            'content': content
        }
        
        print(f"üìß Envoi email via API Streamlit pour {to_email}")
        print(f"üìß URL: {api_url}")
        
        # Faire l'appel API
        response = requests.get(api_url, params=params, timeout=30)
        
        print(f"üìß Status Code: {response.status_code}")
        print(f"üìß Response: {response.text}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get('status') == 200:
                    print(f"‚úÖ Email envoy√© avec succ√®s √† {to_email}")
                    return True
                else:
                    print(f"‚ùå Erreur API: {result.get('error', 'Erreur inconnue')}")
                    return False
            except json.JSONDecodeError:
                print(f"‚ùå R√©ponse non-JSON re√ßue: {response.text}")
                return False
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
            return False
        
    except requests.exceptions.Timeout:
        print("‚ùå Timeout lors de l'appel API")
        return False
    except Exception as e:
        print(f"‚ùå Erreur envoi email: {e}")
        return False

def main():
    """Point d'entr√©e principal"""
    
    # R√©cup√©rer les param√®tres depuis les variables d'environnement
    to_email = os.getenv('TO_EMAIL', '')
    subject = os.getenv('SUBJECT', '')
    content = os.getenv('CONTENT', '')
    
    if not to_email or not subject or not content:
        print("‚ùå Param√®tres manquants: TO_EMAIL, SUBJECT, CONTENT")
        return
    
    # Envoyer l'email
    success = send_email_via_streamlit(to_email, subject, content)
    
    if success:
        print("‚úÖ Email envoy√© avec succ√®s !")
        sys.exit(0)
    else:
        print("‚ùå √âchec envoi email")
        sys.exit(1)

if __name__ == "__main__":
    main()
