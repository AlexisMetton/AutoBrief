#!/usr/bin/env python3
"""
Script de planification pour GitHub Actions
V√©rifie et g√©n√®re automatiquement les r√©sum√©s selon la planification des utilisateurs
"""

import os
import sys
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from email.mime.text import MIMEText

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler_results.log'),
        logging.StreamHandler()
    ]
)

# Ajouter le r√©pertoire parent au path pour importer nos modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from newsletter_manager import NewsletterManager

class AutoBriefScheduler:
    def __init__(self):
        self.config = Config()
        self.data_dir = "user_data"
        self.logger = logging.getLogger(__name__)
        
    def get_all_users(self):
        """R√©cup√®re tous les utilisateurs depuis GitHub Gist avec leurs groupes"""
        users = []
        
        try:
            # Charger les donn√©es depuis GitHub Gist
            gist_id = os.getenv('GIST_ID')
            
            if not gist_id:
                self.logger.info("Aucun GIST_ID trouv√© dans les secrets GitHub")
                return users
            
            import requests
            headers = {'Accept': 'application/vnd.github.v3+json'}
            gist_token = os.getenv('GIST_TOKEN')
            if gist_token:
                headers['Authorization'] = f'token {gist_token}'
            
            response = requests.get(f'https://api.github.com/gists/{gist_id}', headers=headers)
            
            if response.status_code == 200:
                gist_data = response.json()
                if 'user_data.json' in gist_data['files']:
                    content = gist_data['files']['user_data.json']['content']
                    all_users_data = json.loads(content)
                    
                    for user_email, user_data in all_users_data.items():
                        newsletter_groups = user_data.get('newsletter_groups', [])
                        
                        # V√©rifier si l'utilisateur a des groupes actifs
                        if newsletter_groups:
                            users.append({
                                'email': user_email,
                                'newsletter_groups': newsletter_groups,
                                'oauth_credentials': user_data.get('oauth_credentials', {})
                            })
            else:
                self.logger.error(f"Erreur lors de la r√©cup√©ration du Gist: {response.status_code}")
                    
        except Exception as e:
            self.logger.error(f"Erreur lors du chargement des donn√©es utilisateur: {e}")
        
        return users
    
    def should_group_run_automatically(self, group_settings):
        """V√©rifie si un groupe doit √™tre trait√© automatiquement"""
        if not group_settings.get('enabled', True):
            return False
        
        last_run = group_settings.get('last_run')
        if not last_run:
            return True
        
        try:
            last_run_date = datetime.fromisoformat(last_run)
            frequency = group_settings.get('frequency', 'weekly')
            
            # V√©rifier si c'est le bon jour et la bonne heure
            if not self.is_group_scheduled_time(group_settings):
                return False
            
            if frequency == 'daily':
                return datetime.now() - last_run_date >= timedelta(days=1)
            elif frequency == 'weekly':
                return datetime.now() - last_run_date >= timedelta(weeks=1)
        except:
            return True
        
        return False
    
    def is_group_scheduled_time(self, group_settings):
        """V√©rifie si c'est le bon moment pour traiter un groupe"""
        try:
            schedule_day = group_settings.get('schedule_day', 'monday')
            schedule_time = group_settings.get('schedule_time', '09:00')
            
            now = datetime.now()
            current_day = now.strftime('%A').lower()
            current_time = now.strftime('%H:%M')
            
            # V√©rifier le jour (pour la fr√©quence weekly)
            if group_settings.get('frequency', 'weekly') == 'weekly':
                if current_day != schedule_day.lower():
                    return False
            
            # V√©rifier l'heure (avec une marge de 30 minutes)
            target_hour = int(schedule_time.split(':')[0])
            target_minute = int(schedule_time.split(':')[1])
            current_hour = now.hour
            current_minute = now.minute
            
            time_diff = abs((current_hour * 60 + current_minute) - (target_hour * 60 + target_minute))
            return time_diff <= 30
            
        except Exception as e:
            return True  # En cas d'erreur, on autorise l'ex√©cution
    
    def is_scheduled_time(self, user_settings):
        """V√©rifie si c'est le bon jour et la bonne heure pour l'ex√©cution"""
        try:
            schedule_day = user_settings.get('schedule_day', 'monday')
            schedule_time = user_settings.get('schedule_time', '09:00')
            
            now = datetime.now()
            current_day = now.strftime('%A').lower()
            current_time = now.strftime('%H:%M')
            
            # V√©rifier le jour (pour la fr√©quence weekly)
            frequency = user_settings.get('frequency', 'weekly')
            if frequency == 'weekly':
                if current_day != schedule_day.lower():
                    self.logger.info(f"Jour incorrect - Actuel: {current_day}, Attendu: {schedule_day.lower()}")
                    return False
                else:
                    self.logger.info(f"Jour correct - {current_day}")
            
            # Convertir l'heure fran√ßaise vers UTC (soustraire 2h en √©t√©, 1h en hiver)
            target_hour = int(schedule_time.split(':')[0])
            target_minute = int(schedule_time.split(':')[1])
            
            # Conversion France -> UTC (UTC+2 en √©t√©, UTC+1 en hiver)
            # Pour simplifier, on utilise UTC+2 (√©t√©) - ajustez si n√©cessaire
            target_hour_utc = target_hour - 2
            if target_hour_utc < 0:
                target_hour_utc += 24
            
            current_hour = now.hour
            current_minute = now.minute
            
            # GitHub Actions s'ex√©cute √† l'heure pile, on accepte +/- 30 minutes
            time_diff = abs((current_hour * 60 + current_minute) - (target_hour_utc * 60 + target_minute))
            self.logger.info(f"Heure - Actuelle (UTC): {current_hour}:{current_minute:02d}, Cible (France->UTC): {target_hour}:{target_minute:02d}->{target_hour_utc}:{target_minute:02d}, Diff: {time_diff}min")
            return time_diff <= 30
            
        except Exception as e:
            self.logger.error(f"Erreur v√©rification horaire: {e}")
            return True  # En cas d'erreur, on autorise l'ex√©cution
    
    def send_email(self, to_email, subject, content):
        """Envoie un email via le script d'envoi"""
        try:
            import subprocess
            
            # D√©finir les variables d'environnement pour le script
            # Sauvegarder le contenu dans un fichier temporaire
            temp_content_file = 'temp_email_content.html'
            with open(temp_content_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Pr√©parer les variables d'environnement pour le script
            env = os.environ.copy()
            env['TO_EMAIL'] = to_email
            env['SUBJECT'] = subject
            env['CONTENT_FILE'] = temp_content_file
            
            self.logger.info(f"Envoi email pour {to_email}")
            self.logger.info(f"Sujet: {subject}")
            
            # Ex√©cuter le script d'envoi d'email final
            result = subprocess.run(
                ['python', 'send_email_final.py'],
                env=env,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            # Afficher les logs
            if result.stdout:
                for line in result.stdout.strip().split('\n'):
                    self.logger.info(f"üìß {line}")
            
            if result.stderr:
                for line in result.stderr.strip().split('\n'):
                    self.logger.error(f"‚ùå {line}")
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ Email envoy√© avec succ√®s √† {to_email}")
                return True
            else:
                self.logger.error(f"‚ùå √âchec envoi email (code: {result.returncode})")
                return False
            
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå Timeout lors de l'envoi d'email")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur envoi email: {e}")
            return False
    
    def process_user_groups(self, user_info):
        """Traite les groupes de newsletters pour un utilisateur"""
        try:
            self.logger.info(f"üîÑ Traitement des groupes pour {user_info['email']}")
            
            newsletter_groups = user_info.get('newsletter_groups', [])
            if not newsletter_groups:
                self.logger.warning(f"‚ö†Ô∏è Aucun groupe de newsletters pour {user_info['email']}")
                return False
            
            processed_groups = 0
            
            # Traiter chaque groupe individuellement
            for group in newsletter_groups:
                group_title = group.get('title', 'Sans titre')
                group_settings = group.get('settings', {})
                group_emails = group.get('emails', [])
                
                # V√©rifier si ce groupe doit √™tre trait√©
                if not self.should_group_run_automatically(group_settings):
                    self.logger.info(f"‚è≥ Groupe '{group_title}' pas encore pr√™t")
                    continue
                
                if not group_emails:
                    self.logger.warning(f"‚ö†Ô∏è Aucun email dans le groupe '{group_title}'")
                    continue
                
                self.logger.info(f"üìß Traitement du groupe '{group_title}' avec {len(group_emails)} emails")
                
                # Traiter ce groupe sp√©cifique
                if self.process_single_group(user_info, group):
                    processed_groups += 1
                    self.logger.info(f"‚úÖ Groupe '{group_title}' trait√© avec succ√®s")
                else:
                    self.logger.error(f"‚ùå √âchec traitement du groupe '{group_title}'")
            
            return processed_groups > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traitement groupes {user_info['email']}: {e}")
            return False
    
    def process_single_group(self, user_info, group):
        """Traite un groupe sp√©cifique"""
        try:
            group_title = group.get('title', 'Sans titre')
            group_settings = group.get('settings', {})
            group_emails = group.get('emails', [])
            
            # Simuler une session utilisateur pour NewsletterManager
            import streamlit as st
            st.session_state['user_email'] = user_info['email']
            st.session_state['authenticated'] = True
            
            from newsletter_manager import NewsletterManager
            newsletter_manager = NewsletterManager()
            
            # Forcer l'email utilisateur dans le NewsletterManager
            newsletter_manager.user_email = user_info['email']
            
            # D√©sactiver la sauvegarde dans le scheduler
            newsletter_manager._scheduler_mode = True
            
            # Configurer l'acc√®s Gmail pour le NewsletterManager
            try:
                from secure_auth import SecureAuth
                auth = SecureAuth()
                
                # R√©cup√©rer les credentials de l'utilisateur depuis le Gist
                user_credentials = self.get_user_credentials_from_gist(user_info['email'])
                if user_credentials:
                    import json
                    credentials_json = json.dumps(user_credentials)
                    auth.set_external_credentials(credentials_json)
                else:
                    self.logger.error(f"‚ùå Aucun token OAuth2 trouv√© pour {user_info['email']}")
                    return False
                
                newsletter_manager.auth = auth
            except Exception as e:
                self.logger.error(f"‚ùå Erreur configuration Gmail auth: {e}")
                return False
            
            # Traiter ce groupe sp√©cifique
            result = newsletter_manager.process_single_group(group_title, group_settings)
            
            if result:
                # Mettre √† jour la date de derni√®re ex√©cution pour ce groupe
                self.update_group_last_run(user_info['email'], group_title)
                self.logger.info(f"üìÑ R√©sum√© g√©n√©r√© pour le groupe '{group_title}'")
                return True
            else:
                self.logger.warning(f"‚ÑπÔ∏è Aucun contenu trouv√© pour le groupe '{group_title}'")
                return True  # Pas d'erreur, juste rien √† traiter
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traitement groupe '{group_title}': {e}")
            return False
    
    
    def get_user_credentials_from_gist(self, user_email):
        """R√©cup√®re les credentials OAuth2 de l'utilisateur depuis le Gist"""
        try:
            import requests
            import json
            
            gist_id = os.getenv('GIST_ID')
            gist_token = os.getenv('GIST_TOKEN')
            
            
            if not gist_id or not gist_token:
                self.logger.error("‚ùå GIST_ID ou GIST_TOKEN manquant")
                return None
            
            # R√©cup√©rer le Gist
            headers = {
                'Authorization': f'token {gist_token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            response = requests.get(f'https://api.github.com/gists/{gist_id}', headers=headers)
            
            if response.status_code == 200:
                gist_data = response.json()
                if 'user_data.json' in gist_data['files']:
                    content = gist_data['files']['user_data.json']['content']
                    all_users_data = json.loads(content) if content else {}
                    
                    # R√©cup√©rer les donn√©es de l'utilisateur
                    if user_email in all_users_data:
                        user_data = all_users_data[user_email]
                        # V√©rifier si l'utilisateur a des credentials OAuth2 stock√©s
                        if 'oauth_credentials' in user_data:
                            oauth_creds = user_data['oauth_credentials']
                            
                            # V√©rifier si les donn√©es sont chiffr√©es
                            if oauth_creds.get('_encrypted', False) and '_encrypted_data' in oauth_creds:
                                # Les donn√©es sont chiffr√©es, on peut les d√©chiffrer avec SECRET_KEY
                                try:
                                    from cryptography.fernet import Fernet
                                    import base64
                                    import json
                                    
                                    # R√©cup√©rer SECRET_KEY depuis les variables d'environnement
                                    secret_key = os.getenv('SECRET_KEY')
                                    if not secret_key:
                                        self.logger.error("‚ùå SECRET_KEY manquante pour d√©chiffrer les credentials")
                                        return None
                                    
                                    
                                    # G√©n√©rer la cl√© Fernet (m√™me m√©thode que dans config.py)
                                    key = base64.urlsafe_b64encode(secret_key.encode()[:32].ljust(32, b'0'))
                                    fernet = Fernet(key)
                                    
                                    # D√©chiffrer les credentials
                                    encrypted_data = oauth_creds['_encrypted_data']
                                    
                                    # Essayer de d√©chiffrer avec diff√©rentes m√©thodes
                                    try:
                                        # M√©thode 1: Direct
                                        decrypted_data = fernet.decrypt(encrypted_data.encode())
                                    except Exception:
                                        # M√©thode 2: Avec donn√©es pr√©-d√©cod√©es
                                        try:
                                            import base64
                                            decoded_data = base64.b64decode(encrypted_data)
                                            decrypted_data = fernet.decrypt(decoded_data)
                                        except Exception:
                                            return None
                                    
                                    decrypted_creds = json.loads(decrypted_data.decode())
                                    
                                    return decrypted_creds
                                    
                                except Exception as e:
                                    self.logger.error(f"‚ùå Erreur d√©chiffrement credentials pour {user_email}: {e}")
                                    self.logger.error(f"‚ùå Type d'erreur: {type(e).__name__}")
                                    self.logger.error(f"‚ùå Message d√©taill√©: {str(e)}")
                                    return None
                            else:
                                # Ancien format non chiffr√© (pour compatibilit√©)
                                return oauth_creds
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Aucun token OAuth2 stock√© pour {user_email}")
                            return None
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Utilisateur {user_email} non trouv√© dans le Gist")
                        return None
                else:
                    self.logger.error("‚ùå Fichier user_data.json non trouv√© dans le Gist")
                    return None
            else:
                self.logger.error(f"‚ùå Erreur acc√®s Gist: {response.status_code}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration credentials utilisateur: {e}")
            return None
    
    def update_group_last_run(self, user_email, group_title):
        """Met √† jour la date de derni√®re ex√©cution pour un groupe sp√©cifique"""
        try:
            gist_id = os.getenv('GIST_ID')
            
            if not gist_id:
                self.logger.error("GIST_ID non trouv√© dans les variables d'environnement")
                return
            
            import requests
            
            # Charger les donn√©es actuelles du Gist
            headers = {'Accept': 'application/vnd.github.v3+json'}
            gist_token = os.getenv('GIST_TOKEN')
            if gist_token:
                headers['Authorization'] = f'token {gist_token}'
            
            response = requests.get(f'https://api.github.com/gists/{gist_id}', headers=headers)
            
            if response.status_code == 200:
                gist_data = response.json()
                if 'user_data.json' in gist_data['files']:
                    content = gist_data['files']['user_data.json']['content']
                    all_users_data = json.loads(content)
                    
                    # Mettre √† jour la date pour ce groupe sp√©cifique
                    if user_email in all_users_data:
                        user_data = all_users_data[user_email]
                        newsletter_groups = user_data.get('newsletter_groups', [])
                        
                        for group in newsletter_groups:
                            if group.get('title') == group_title:
                                group['settings']['last_run'] = datetime.now().isoformat()
                                break
                        
                        # Mettre √† jour le Gist
                        update_data = {
                            "files": {
                                "user_data.json": {
                                    "content": json.dumps(all_users_data, indent=2, ensure_ascii=False)
                                }
                            }
                        }
                        
                        # Headers avec authentification
                        headers = {'Accept': 'application/vnd.github.v3+json'}
                        gist_token = os.getenv('GIST_TOKEN')
                        if gist_token:
                            headers['Authorization'] = f'token {gist_token}'
                        
                        update_response = requests.patch(
                            f'https://api.github.com/gists/{gist_id}',
                            json=update_data,
                            headers=headers
                        )
                        
                        if update_response.status_code == 200:
                            self.logger.info(f"‚úÖ Date de derni√®re ex√©cution mise √† jour pour le groupe '{group_title}' de {user_email}")
                        else:
                            self.logger.error(f"‚ùå Erreur lors de la mise √† jour du Gist: {update_response.status_code}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Utilisateur {user_email} non trouv√© dans les donn√©es")
                else:
                    self.logger.error("Fichier user_data.json non trouv√© dans le Gist")
            else:
                self.logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du Gist: {response.status_code}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur mise √† jour: {e}")
    
    def run_scheduler(self):
        """Fonction principale du scheduler"""
        self.logger.info(f"üöÄ D√©marrage du scheduler AutoBrief - {datetime.now()}")
        
        users = self.get_all_users()
        self.logger.info(f"üë• {len(users)} utilisateurs avec des groupes de newsletters")
        
        processed = 0
        for user_info in users:
            self.logger.info(f"üîÑ V√©rification des groupes pour {user_info['email']}")
            
            if self.process_user_groups(user_info):
                processed += 1
                self.logger.info(f"‚úÖ Traitement r√©ussi pour {user_info['email']}")
            else:
                self.logger.info(f"‚ÑπÔ∏è Aucun groupe √† traiter pour {user_info['email']}")
        
        self.logger.info(f"üéØ Scheduler termin√© - {processed} utilisateurs trait√©s")
        return processed

def main():
    """Point d'entr√©e principal"""
    scheduler = AutoBriefScheduler()
    scheduler.run_scheduler()

if __name__ == "__main__":
    main()
